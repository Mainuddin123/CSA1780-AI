import heapq

class Node:
    def __init__(self, state, parent=None, cost=0, heuristic=0):
        self.state = state
        self.parent = parent
        self.cost = cost
        self.heuristic = heuristic

    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

def a_star(graph, start, goal):
    open_list = []
    heapq.heappush(open_list, Node(start, None, 0, heuristic(start, goal)))
    closed_set = set()

    while open_list:
        current_node = heapq.heappop(open_list)
        current_state = current_node.state

        if current_state == goal:
            path = []
            while current_node:
                path.insert(0, current_node.state)
                current_node = current_node.parent
            return path

        closed_set.add(current_state)

        for neighbor, cost in graph[current_state]:
            if neighbor not in closed_set:
                neighbor_node = Node(neighbor, current_node, current_node.cost + cost, heuristic(neighbor, goal))
                heapq.heappush(open_list, neighbor_node)

    return None

def heuristic(state, goal):
    # Replace this heuristic with your specific problem's heuristic.
    return 0

if __name__ == "__main__":
    graph = {
        'A': [('B', 10), ('C', 15)],
        'B': [('A', 10), ('C', 35)],
        'C': [('A', 15), ('B', 35)]
    }
    start_node = 'A'
    goal_node = 'C'

    path = a_star(graph, start_node, goal_node)
    if path:
        print(f"Shortest path from {start_node} to {goal_node}: {path}")
    else:
        print("No path found.")
