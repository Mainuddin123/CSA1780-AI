import heapq

class PuzzleNode:
    def __init__(self, state, parent=None, action=None):
        self.state = state
        self.parent = parent
        self.action = action
        self.cost = 0

    def __lt__(self, other):
        return self.cost < other.cost

    def __eq__(self, other):
        return self.state == other.state

    def __hash__(self):
        return hash(tuple(self.state))

def print_solution(node):
    path = []
    while node:
        path.append(node.state)
        node = node.parent
    path.reverse()
    for state in path:
        print_state(state)

def print_state(state):
    for row in state:
        print(" ".join(map(str, row)))
    print("\n")

def is_goal_state(state):
    goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
    return state == goal_state

def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def get_neighbors(state):
    i, j = find_blank(state)
    neighbors = []
    if i > 0:
        new_state = [row[:] for row in state]
        new_state[i][j], new_state[i - 1][j] = new_state[i - 1][j], new_state[i][j]
        neighbors.append(new_state)
    if i < 2:
        new_state = [row[:] for row in state]
        new_state[i][j], new_state[i + 1][j] = new_state[i + 1][j], new_state[i][j]
        neighbors.append(new_state)
    if j > 0:
        new_state = [row[:] for row in state]
        new_state[i][j], new_state[i][j - 1] = new_state[i][j - 1], new_state[i][j]
        neighbors.append(new_state)
    if j < 2:
        new_state = [row[:] for row in state]
        new_state[i][j], new_state[i][j + 1] = new_state[i][j + 1], new_state[i][j]
        neighbors.append(new_state)
    return neighbors

def heuristic(state):
    # This is a simple heuristic, known as the Manhattan distance.
    # It calculates the sum of the Manhattan distances of each tile from its goal position.
    goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
    distance = 0
    for i in range(3):
        for j in range(3):
            tile = state[i][j]
            if tile != 0:
                goal_i, goal_j = divmod(tile - 1, 3)
                distance += abs(i - goal_i) + abs(j - goal_j)
    return distance

def astar(initial_state):
    open_set = []
    heapq.heappush(open_set, PuzzleNode(initial_state))
    closed_set = set()
    
    while open_set:
        current_node = heapq.heappop(open_set)
        current_state = current_node.state

        if is_goal_state(current_state):
            print("Solution found!")
            print_solution(current_node)
            return

        closed_set.add(current_node)

        for neighbor_state in get_neighbors(current_state):
            neighbor_node = PuzzleNode(neighbor_state, current_node)
            if neighbor_node in closed_set:
                continue

            neighbor_node.cost = len([n for n in neighbor_state if 0 not in n]) + heuristic(neighbor_state)

            if neighbor_node not in open_set:
                heapq.heappush(open_set, neighbor_node)

if __name__ == "__main__":
    initial_state = [[1, 2, 3], [4, 5, 0], [7, 8, 6]]
    print("Initial state:")
    print_state(initial_state)
    astar(initial_state)
